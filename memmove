
3.模拟实现memmove函数。
#include<stdio.h>
#include<stdlib.h>
void *my_memmove(void* dest,const void *src,size_t count)
{
	void * ret = dest;
	if(dest>src && (char*)dest<((char*)src+count))
	{
		while(count--)
		{
			*((char*)dest+count) = *((char*)src+count);

		}
	}
	else 
	{
		while(count--)
		{
	      *((char*)dest) = *((char*)src);
		  dest = (char*)dest+1;
		  src = (char*)src+1;

	    }
	}
	return ret;

}
int main()
{
	int i = 0;
	int arr[] = {1,2,3,4,5,6,7,8,9,0};
	int arr1[10] = {0};
	int sz = sizeof(arr)/sizeof(arr[0]);
	my_memmove(arr+2,arr,sizeof(arr));
	for(i = 0;i<sz;i++)
	{
		printf("%d ",arr[i]);
	}
    system("pause");
	return 0;
}


4.实现一个选择排序程序，排序整型数组。
#include<stdio.h>
#include<stdlib.h>
void SelectSort(int *arr,int sz)
{
	int i = 0;
	int j = 0;
	int num = 0;
	for(i = 0;i < sz;i++)
	{
		
		for(j = i;j < sz;j++)
		{
           num = arr[i];
		if(num>arr[j])
		{
			
			num = arr[j];
			arr[j] = arr[i];
			arr[i] = num;
		
		}
		}
		
	}
}
int main()
{
	int arr[] = {49,27,65,97,76,12,38,56,78,20};
	int i = 0;
	int sz = sizeof(arr)/sizeof(arr[0]);
	SelectSort(arr,sz);
	for(i = 0; i<sz;i++)
	{
		printf("%d ",arr[i]);
	}
	system("pause");
	return 0;
}


5.在一个字符串中查找第一个只出现一次的字符。
要求复杂度为O(N).

例如：
字符串："aaaabfqccrbdw",返回f.
#include<stdio.h>
#include<stdlib.h>	
char search_ch(char *str)
{
	char *dest = str;
	char *src = str+1;
	char *ret = str;
	while(*src)
	{
		if(*dest != *src)
		{
			src++;
		}
		else 
		{
			if(dest == src)
				src++;
			else {
			src = ret;
			if(*dest != '\0')
	        dest++;
			}
		}
}
 return *dest;
}
int main()
{
	char arr[] = "gggjhhkgdgggk";
	char ret = search_ch(arr);
	printf("%c\n",ret);
	system("pause");
	return 0;
}


