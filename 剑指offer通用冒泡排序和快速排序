#include<stdio.h>
#include<stdlib.h>
#include<string.h>
int cmp_arr(const char *buf1,const char *buf2)
{
	return *(int *)buf1-*(int *)buf2;
}
//int cmp_str(const char **buf1,const char **buf2)
//{
//
//	return strcmp( *buf1, *buf2);
//
//}
//float cmp_flo(const char **buf1,const char **buf2)
//{
//   return *(float *)buf1-*(float *)buf2;
//}
void _Swap(char *p1,char *p2,int width)
{
	int i = 0;
	char ch = 0;
	for(i = 0;i<width;i++)
	{
		ch = *p1;
		*p1 = *p2;
		*p2 = ch;
		p1++;
		p2++;
	}
}
int main()
{
	
	int arr[] = {1,3,5,7,9,2,4,6,8,0};
	/*char *arr[] = {"bbb","aa","ddd","cccc"};*/
	/*float arr[] = {1.6f,1.5f,1.4f,1.3f,1.2f,1.1f};*/
	int i = 0;
	int sz = sizeof(arr)/sizeof(arr[0]);
	qsort(arr,sz,sizeof(int),cmp_arr);
	for(i = 0;i < sz;i++)
	{
		printf("%d ",arr[i]);
	}


	system("pause");
	return 0;
}
3.自己实现一个bubble_sort(冒泡排序)，可以完成不同类型数据的排序。
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//int cmp_arr(const char *buf1,const char *buf2)
//{
//	return *(int *)buf1-*(int *)buf2;
//}
//int cmp_str(const char **buf1,const char **buf2)
//{
//
//	return strcmp( *buf1, *buf2);
//
//}
float cmp_flo(const char **buf1,const char **buf2)
{
   return *(float *)buf1-*(float *)buf2;
}
void _Swap(char *p1,char *p2,int width)
{
	int i = 0;
	char ch = 0;
	for(i = 0;i<width;i++)
	{
		ch = *p1;
		*p1 = *p2;
		*p2 = ch;
		p1++;
		p2++;
	}
}
void bubble_sort(void *arr,int sz,int width,float (*cmp)(const char*,const char*))
{
	int i = 0;
	int j = 0;
	int ret = 0;
	for(i = 0;i < sz-1;i++)
	{
		for(j = 0;j < sz-1-i;j++)
		{ 
			if(cmp((char*)arr+j*width,(char*)arr+(j+1)*width)>0)
			{
				_Swap((char*)arr+j*width,(char*)arr+(j+1)*width,width);
			}

		}
	}
	
}
int main()
{
	
	/*int arr[] = {1,3,5,7,9,2,4,6,8,0};*/
	/*char *arr[] = {"bbb","aa","ddd","cccc"};*/
	float arr[] = {1.6f,1.5f,1.4f,1.3f,1.2f,1.1f};
	int i = 0;
	int sz = sizeof(arr)/sizeof(arr[0]);
	bubble_sort(arr,sz,sizeof(float),cmp_flo);
	for(i = 0;i < sz;i++)
	{
		printf("%f ",arr[i]);
	}
	printf("%f",sz);
	
	system("pause");
	return 0;
}
